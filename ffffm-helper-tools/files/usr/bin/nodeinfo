#!/bin/sh
. /usr/share/libubox/jshn.sh
json_init 
_set_var _json_no_warning 1

NODEINFO="$(mktemp -p /tmp)"
gluon-neighbour-info -d ::1 -p 1001 -c 1 -r nodeinfo > $NODEINFO

STATISTICS="$(mktemp -p /tmp)"
gluon-neighbour-info -d ::1 -p 1001 -c 1 -r statistics > $STATISTICS

echo "### Gluon-Info: "
gluon-info
echo -n "### Hardware ID: "
# Bei TP-Link Geraeten kann eine HWID ausgelesen werden
echo $([ -f /lib/ar71xx.sh ]&&[ $(head -c 4 /tmp/sysinfo/model) = 'TP-L' ]&&(. /lib/ar71xx.sh ;. /lib/functions.sh ; echo $(tplink_get_hwid))||(echo '-'))
echo -n "### Autoupdate enabled: "
uci -q get autoupdater.settings.enabled
echo -n "### Autoupdate Branch: "
uci -q get autoupdater.settings.branch

echo "### Location:"
echo -n " Enabled: "
uci -q get gluon-node-info.@location[0].share_location || echo '0'
echo -n " Latitude:  "
uci -q get  gluon-node-info.@location[0].latitude || echo '-'
echo -n " Longitude: "
uci -q get gluon-node-info.@location[0].longitude || echo '-'

echo -n "### Contact Information: "
uci -q get gluon-node-info.@owner[0].contact || echo '-'

echo
echo -n "### Node ID: "
jsonfilter -i $NODEINFO -e '@.node_id'
echo -n "### Node MAC: "
jsonfilter -i $NODEINFO -e '@.network.mac'
echo -n "### Node IPv6: "
jsonfilter -i $NODEINFO -e '@.network.addresses.*'

echo
echo "### (Next)Node IPv4:   $(uci -q get network.local_node.ipaddr || echo '-')"

echo -n "### Mesh-VPN: enabled: "
uci -q get gluon.mesh_vpn.enabled || echo '-'

echo "### Gateways:"
json_load_file $STATISTICS
json_select "mesh_vpn"
json_select "groups"
json_select "backbone"
json_select "peers"
json_get_keys peers
for gw in $peers; do
    if json_select "$gw"; then
        json_get_keys values
        for key in $values; do
            json_get_var $key $key
        done
        if [ ! -z $method ]; then
            gwup="$(echo "$established" | cut -d '.' -f 1)"
            timestring=$(date -ud "@$gwup" +"$(( $gwup/3600/24 )) days %H hours %M minutes %S seconds")
            echo $gw -- method: $method - established: $timestring
        fi
fi
done

echo
echo "### Mesh:"
echo -n " Mesh on LAN enabled: "
if [ $(uci -q get network.mesh_lan.disabled || echo 1) = '1' ]; then echo '0'; else echo '1'; fi
echo -n " Mesh on WAN enabled: "
if [ $(uci -q get network.mesh_wan.disabled || echo 1) = '1' ]; then echo '0'; else echo '1'; fi
for i in 0 1; do
uci -q get wireless.mesh_radio$i.disabled > /dev/null
if [ $? = '0' ]; then
echo -n " Mesh on Radio$i enabled: "; if [ $(uci -q get wireless.mesh_radio$i.disabled || echo 1) = '1' ]; then echo '0'; else echo '1'; fi
fi
done

echo
echo "### Wifi:"
echo -n " DFS-Outdoor Mode: "
if [ ! $(uci -q get gluon.wireless.outdoor) ] ; then echo '-'; else uci -q get gluon.wireless.outdoor; fi
echo -n " Radio0 enabled: "
if [ $(uci -q get wireless.radio0.disabled || echo 1) = '0' ]; then echo '1'; elif [ $(uci -q get wireless.client_radio0.disabled) ]; then echo '1'; else echo '-'; fi
echo -n " Radio0 channel: "
uci -q get wireless.radio0.channel || echo '-'
echo -n " Radio0 clients enabled: "
if [ ! $(uci -q get wireless.client_radio0.disabled) ] ; then echo '-'; elif [ $(uci -q get wireless.client_radio0.disabled || echo 1) = '1' ]; then echo '0'; else echo '1'; fi
echo -n " Radio1 enabled: "
if [ $(uci -q get wireless.radio1.disabled || echo 1) = '0' ]; then echo '1'; elif [ $(uci -q get wireless.client_radio1.disabled) ]; then echo '1'; else echo '-'; fi
echo -n " Radio1 channel: "
uci -q get wireless.radio1.channel || echo '-'
echo -n " Radio1 clients enabled: "
if [ ! $(uci -q get wireless.client_radio1.disabled) ] ; then echo '-'; elif [ $(uci -q get wireless.client_radio1.disabled || echo 1) = '1' ]; then echo '0'; else echo '1'; fi
echo -n " Connected clients 2.4 GHz: "
jsonfilter -i $STATISTICS -e '$.clients.wifi24'
echo -n " Connected clients 5 GHz: "
jsonfilter -i $STATISTICS -e '$.clients.wifi5'

## get memory usage
json_load_file $STATISTICS
json_select memory
json_get_keys memitems
for memitem in $memitems; do
    json_get_var $memitem $memitem
done
echo
echo "### RAM: $total, free: $free, available: $available, buffers: $buffers, cached: $cached"

echo -n "### Uptime:"
uptime

echo "### SSH connection from/to : "$SSH_CONNECTION

#Aufraeumen
rm $NODEINFO
rm $STATISTICS

